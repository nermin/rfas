RFAS contains two modules:
1. ventsink - library which allows for certain collections (ex. List) its operations (ex. map, filter, flatMap)
              to be executed in a distributed fashion, across a compute grid.
              As a result, computationally intensive tasks could be ran in parallel, utilizing
              multiple computing resources.
              It's an extension to Scala's collection library and preserves the same Collections API.

2. worker   - server which applies functions. It's a multithreaded application which accepts requests
              from ventsink containing a function and a parameter, then applies the function to the
              parameter and finally sends the result of the function application back to ventsink.

Setup
-----
* 0MQ must be installed on all nodes (client and worker)
* LD_LIBRARY_PATH must be defined and point to 0MQ libraries directory (ex.: /usr/local/lib)
* All worker nodes must have client JAR file in the classpath (due to lack of remote class loading)

Current Limitations
-------------------
1. Only single parameter functions can be remotely applied
2. Parameters and functions must be *fully* serializable to be remotely applied

Desired Improvements
--------------------
1. Remote class loading on the worker side
2. Define a common project on which ventsink and worker shall depend (apparently this is possible in SBT)
3. Write some unit tests
4. Incorporate some kind of logging (ex. SLF4S, Configgy, etc...)